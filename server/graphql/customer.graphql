extend type Query {
    customers: [Customer!]! @guard @paginate
    customer(id: ID @eq): Customer @guard @find
    countCustomers: Int! @guard
    searchCustomers(query: String!): [Customer!]! @guard
}

extend type Mutation {
    createCustomer(
        name: String! @rules(apply: ["unique:customers"])
        phone_number: String! @rules(apply: ["required"])
        registration_date: String
        address: String
        score: Int @rules(apply: ["integer"])
    ): Customer! @guard @create

    updateCustomer(
        id: ID!,
        name: String @rules(apply: ["unique:customers"]),
        phone_number: String,
        registration_date: String,
        address: String,
        score: String
    ): Customer! @guard @update
    
    deleteCustomer(id: ID!): Customer @guard @delete
    
    upsertCustomer(
        id: ID!,
        name: String,
        phone_number: String,
        registration_date: String,
        address: String,
        score: Int
    ): Customer! @guard @upsert
    
    updateCustomerScore(id: ID!, score: Int): Int @guard
}

type Customer {
    id: ID!
    name: String
    phone_number: String
    registration_date: String
    address: String
    score: String
    purchases: [Purchase]! @hasMany
    created_at: String!
    updated_at: String
}
